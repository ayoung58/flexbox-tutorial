* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  .menu-container {
    color: #fff;
    background-color: #5995DA;  /* Blue */
    padding: 20px 0;
    display: flex;
    /* This would have same effect as adding margin: 0 auto in .menu; it essentially centers element */
    /* Values: center, flex-start (push to left), flex-end (push to right), space-around, space-between */
    justify-content: center;
  }
  
  .menu {
    border: 1px solid #fff;  /* For debugging */
    width: 900px;
    padding: 5px 15px;
    /* Makes the item a container too */
    display: flex;
    justify-content: space-between;
  }

  .links {
    display: flex;
    justify-content: flex-end;
  }

  .login {
    /* margin still work as they do without flex */
    margin-left: 20px;
  }

  .header-container {
    color: #5995DA;
    background-color: #D6E9FE;
    display: flex;
    justify-content: center;  
  }

  .header {
    width: 900px;
    height: 300px;
    display: flex;
    justify-content: space-between;
    /* Values: center, flex-start, flex-end, stretch, baseline */
    /* Stretch allows you to display the background of each element (stretches to fix the height) */
    align-items: center;
  }

  .photo-grid-container {
    display: flex;
    justify-content: center;
  }
  
  .photo-grid {
    width: 900px;
    display: flex;
    /* These two wrap and center the objects in the container */
    justify-content: center;
    flex-wrap: wrap;
    flex-direction: row;
    align-items: center;
  }
  
  .photo-grid-item {
    border: 1px solid #fff;
    width: 300px;
    height: 300px;
  }

  /* This works by editing the properties of the given elements */
  /* This works across rows AND columns, unlike flex-direction (so this shows 5 2 3, then 4 1) */
  .first-item {
    order: 1;
  }

  .last-item {
    order: -1;
  }

  .social,
  .subscribe {
    /* This allows the item to align itself and be different from the container */
    /* Overrides align-items in container */
    /* Values are the same as align-items */
    align-self: flex-end;
    margin-bottom: 20px;
  }

  .footer {
    display: flex;
    justify-content: space-between;
  }

  .footer-item {
    border: 1px solid #fff;
    background-color: #D6E9FE;
    height: 200px;
    /* Flex of 1 means to stretch to match width of container (i.e. footer) */
    /* Increasing weight of one of them causes them to grow faster than others */
    /* Gives us full control of how the items fit the containers */
    flex: 1;
    /* flex: is actually divided into flex-grow, flex-shrink, and flex-basis. 
    Flex-basis sets the initial size of a flex item, so any sort of flex-growing or flex-shrinking starts from that baseline size*/
    /* Using flex-basis: auto tells flexbox to check for the width size and start from there, whereas with flex-basis: 0, it starts from 0 */
    /* If you start from zero and the container doesn't have a width, then everything collapses. */
  }

  .footer-one,
  .footer-three {
    background-color: #5995DA;
    /* Flex initial allows us to fix the size of these two items */
    /* This is a fairly common layout, as many websites have a fixed-width sidebar, with adjustable main text */
    flex: initial;
    width: 300px;
  }

  .signup {
    /* auto margins takes up all the space in a flex container */
    /* This allows us to take out the links class div */
    margin-left: auto;
  } 

